{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","icon","onClick","deleteItem","duration","easing","App","state","currentItem","handleInput","bind","addItem","this","setState","Date","now","preventDefault","newItem","newItems","filteredItems","filter","itemss","onSubmit","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sVA4BeA,MAvBf,SAAmBC,GAChB,IACMC,EADOD,EAAME,MACKC,KAAI,SAAAC,GAExB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACnC,2BACE,2BAAOC,KAAK,OAAOC,GAAIJ,EAAKE,IAAMG,MAAOL,EAAKM,KAC9CC,SAAW,SAACC,GAAOZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAML,EAAKE,QACzD,8BACI,kBAAC,IAAD,CAAYD,UAAU,aAAaU,KAAK,QACxCC,QAAU,kBAAKhB,EAAMiB,WAAWb,EAAKE,SALzC,SAUJ,OACA,6BACE,kBAAC,IAAD,CAAUY,SAAU,IAAKC,OAAO,eAC9BlB,GAFJ,MC8DQmB,E,kDA9Ed,WAAYpB,GAAO,IAAD,8BAChB,cAAMA,IAEDqB,MAAM,CACTnB,MAAM,GACNoB,YAAY,CACVZ,KAAK,GACLJ,IAAI,KAGR,EAAKiB,YAAa,EAAKA,YAAYC,KAAjB,gBAClB,EAAKC,QAAQ,EAAKA,QAAQD,KAAb,gBACb,EAAKP,WAAW,EAAKA,WAAWO,KAAhB,gBAChB,EAAKX,UAAU,EAAKA,UAAUW,KAAf,gBAbC,E,wDAgBNZ,GACVc,KAAKC,SAAS,CACZL,YAAY,CACVZ,KAAKE,EAAEE,OAAOL,MAChBH,IAAIsB,KAAKC,W,8BAILjB,GACTA,EAAEkB,iBACF,IAAMC,EAASL,KAAKL,MAAMC,YAC1B,GAAmB,KAAhBS,EAAQrB,KAAW,CACpB,IAAMsB,EAAS,GAAD,mBAAKN,KAAKL,MAAMnB,OAAhB,CAAsB6B,IACpCL,KAAKC,SAAS,CACZzB,MAAO8B,EACPV,YAAY,CACVZ,KAAK,GACLJ,IAAI,S,iCAKCA,GACT,IAAM2B,EAAgBP,KAAKL,MAAMnB,MAAMgC,QAAO,SAAA9B,GAAI,OAChDA,EAAKE,MAAQA,KACboB,KAAKC,SAAS,CACZzB,MAAO+B,M,gCAIHvB,EAAKJ,GACb,IAAM6B,EAAST,KAAKL,MAAMnB,MAC5BiC,EAAOhC,KAAI,SAAAC,GACNA,EAAKE,MAAMA,IACZF,EAAKM,KAAKA,MAGdgB,KAAKC,SAAS,CACZzB,MAAOiC,M,+BAML,OACE,yBAAK9B,UAAU,OACrB,gCACE,0BAAMG,GAAG,aAAa4B,SAAUV,KAAKD,SACnC,2BAAOlB,KAAK,OAAQ8B,YAAY,aAChC5B,MAAQiB,KAAKL,MAAMC,YAAYZ,KAC/BC,SAAUe,KAAKH,cACf,4BAAQhB,KAAK,UAAb,SAGJ,kBAAC,EAAD,CAAWL,MAAOwB,KAAKL,MAAMnB,MAC7Be,WAAYS,KAAKT,WACjBJ,UAAWa,KAAKb,iB,GAzEEyB,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6d9d9c84.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ListItems.css'\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Flipmove from  'react-flip-move'\r\n\r\nfunction ListItems(props){\r\n   const items =props.items;\r\n   const listItems = items.map(item=> \r\n   {\r\n       return <div className=\"list\" key={item.key}>\r\n           <p>\r\n             <input type='text' id={item.key}  value={item.text}\r\n             onChange= {(e) => {props.setUpdate(e.target.value,item.key) }}/>\r\n           <span>\r\n               <DeleteIcon className=\"deleteicon\" icon='trash'\r\n               onClick={ ()=> props.deleteItem(item.key)}\r\n               />\r\n           </span> </p> \r\n       </div> \r\n   } )\r\n       return(\r\n       <div>\r\n         <Flipmove duration={500} easing='ease-in-out'>\r\n          {listItems}\r\n          </Flipmove> </div>\r\n    )\r\n}\r\n\r\nexport default ListItems;","import React, { Component } from 'react';\nimport './App.css';\nimport ListItems from './ListItems'\n\nclass App extends Component {\n constructor(props){\n   super(props);\n\n   this.state={\n     items:[],\n     currentItem:{\n       text:'',\n       key:''\n     }\n   }\n   this.handleInput= this.handleInput.bind(this);\n   this.addItem=this.addItem.bind(this);\n   this.deleteItem=this.deleteItem.bind(this);\n   this.setUpdate=this.setUpdate.bind(this);\n } \n \n handleInput(e){\n   this.setState({\n     currentItem:{\n       text:e.target.value,\n     key:Date.now()\n    } })\n }\n\n addItem(e){\ne.preventDefault();\nconst newItem= this.state.currentItem;\nif(newItem.text!== \"\"){\n  const newItems=[...this.state.items,newItem]\n  this.setState({\n    items: newItems,\n    currentItem:{\n      text:'',\n      key:''\n    }\n  })\n}}\n\ndeleteItem(key){\n  const filteredItems = this.state.items.filter(item => \n    item.key !== key)\n    this.setState({\n      items: filteredItems\n    })\n}\n\nsetUpdate(text,key){\n  const itemss = this.state.items;\nitemss.map(item=>{\n  if(item.key===key){\n    item.text=text;\n  }\n})\nthis.setState({\n  items: itemss\n})\n\n}\n  render(){\n\n    return (\n      <div className=\"App\">\n<header>\n  <form id='to-do-form' onSubmit={this.addItem}>\n    <input type=\"text\"  placeholder='Enter Text'\n    value= {this.state.currentItem.text}\n    onChange={this.handleInput} />\n    <button type='submit'>Add</button>\n  </form>\n</header>\n<ListItems items={this.state.items}\ndeleteItem={this.deleteItem}\nsetUpdate={this.setUpdate}/>\n</div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n \n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}